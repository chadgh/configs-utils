let mapleader = ','

let g:snips_author = 'Chad G. Hansen (chadgh)'

"Filetype stuff
filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

"not compatible with vi
set nocompatible

"no beeping
set noerrorbells novisualbell
autocmd VimEnter * set vb t_vb=

"I don't use modelines, so shut them off
set modelines=0

"from scott's
"set laststatus=2
"set statusline=%F%m%r%h%w\ [TYPE=%Y\ %{&ff}]\ [%l/%L\ (%p%%)]
""Insert/Replace Context-specific coloring
"highlight LineNr term=none cterm=NONE ctermfg=117 ctermbg=darkgray gui=NONE guifg=DarkGrey guibg=NONE
"function! InsertLineNumberColor(mode)
"	if a:mode == 'i'
"		hi LineNr ctermbg=22 
"	elseif a:mode == 'r'
"		hi LineNr ctermbg=52
"	else
"		hi LineNr ctermbg=red
"	endif
"endfunction
"au InsertEnter  * call InsertLineNumberColor(v:insertmode)
"au InsertChange * call InsertLineNumberColor(v:insertmode)
"au InsertLeave  * hi LineNr ctermbg=darkgray


"set up tabs
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab "keep as tabs - not spaces

"syntax highlighting - yes please
syntax on

"use utf-8 for encoding
set encoding=utf-8

"three lines from the top or bottom while scrolling
set scrolloff=3

"indenting
"set cindent
set autoindent
set smartindent

"makes hidden buffers easier to create
set hidden

"change the title to include the current file
set icon
auto BufEnter * let &iconstring = "vim " . expand("%:t")

"allows for split windows to say the size I set them
set noequalalways

"fast terminal connection - sends more characters at a time
set ttyfast

"some helper functions
function! OnProduction()
	if ((match(hostname(), 'web2') >= 0) || (match(hostname(), 'web5') >= 0) || (match(hostname(), 'web9') >= 0))
		return 1
	else
		return 0
	endif
endfunction

function! GetHostName()
	let hostname = hostname() . ': '
	if (match(hostname(), 'ds1-1') >= 0) " development
		let hostname = 'dev: '
	elseif (OnProduction() == 1) " production
		let hostname = '***PRODUCTION***' . hostname() . ': '
	endif
	return hostname
endfunction

"status bar options and customization
"set showcmd "shows that command executed
set laststatus=2						"Always show a status line
set statusline=\ %{GetHostName()}			"Hostname
set statusline+=%f\ 						"filename with full path
set statusline+=%r						"read-only?
if exists("+fugitive")
	set statusline+=%{fugitive#statusline()}
endif
set statusline+=%=						"right align the rest
set statusline+=%l/%L\ \ 				"line # out of total, two spaces
set statusline+=%P\ 						"percentage of file

"turns on the cursorline by default
set cursorline
"turn wrapping on by default
set wrap
"turn on nice line breaking
set lbr
"use ellipsis to indicate a line break
set showbreak=…

"turns on auto completion in command mode
set wildmenu
set wildmode=full

"turn on status line with cursors current position
set ruler

"makes backspace work as expected
set backspace=start,indent,eol

"relative numbering by default
"if has('relativenumber')
if exists("+relativenumber")
	set relativenumber
else
	"line numbering by default
	set number
endif

"keep 100 of the past commands
set history=100

"location of swap files
set dir=~/.vimswap
"swap file is written to disk after this many milliseconds of inactivity
set updatetime=500

"undo stuff
"location of undo files
if exists("+undodir")
	set undodir=~/.vimundo
	"save an undo file - persistent undo
	set undofile
	"max number of changes that can be undone
	set undolevels=1000
	"undo on reload
	set undoreload=10000
endif

"fix search - normal regex can be used in searching
nnoremap / /\v
vnoremap / /\v

"search with case-sensitivity smartly
"search in all lowercase - search is case-insensitive
"search with one or more uppercase - search is case-sensitive
set ignorecase
set smartcase

"makes all substitutions global - no need to add the 'g' on the end
set gdefault

"work together to highlight and show matches as you type
set incsearch
set showmatch
set hlsearch
noh

"make hitting tab go to the matching bracket
nnoremap <tab> %
vnoremap <tab> %

" automatically change dir to the dir that the currently working file is.
if exists("+autochdir")
	set autochdir
else
	autocmd BufEnter * lcd %:p:h
endif

"characters to use for tabs and eol
set listchars=tab:▸\ ,trail:܀,eol:¬

"more colors
set t_Co=256

"Appearance
"use different colorschemes and fonts in gui or terminal
if has("gui_running")
	set guioptions=aiA
	color lucius
	set guifont=monaco\ 10
	"set guifont=Ubuntu\ Mono\ 12
	set lines=65 columns=100
else
	colorscheme lucius
endif

hi LineNr ctermfg=DarkGray
hi CursorLine cterm=NONE ctermbg=236 ctermfg=NONE guibg=#262946
hi NonText ctermfg=DarkGray guifg=#363946
hi clear SpecialKey
hi link SpecialKey NonText

"Buffergator seetings
let g:buffergator_viewport_split_policy='L'
let g:buffergator_autoexpand_on_split=0


"fix escape - if I hit <F1> it acts like an <ESC> press
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
inoremap jj <ESC>

"""""""" some helpful abbreviations
"displays the current date
iab <expr> dts strftime("%m/%d/%y")
iab <expr> Ymd strftime("%Y-%m-%d")

""""""" custom commands
"leader(<space>,b,c,e,ft,l,n,r,s,ve,vs,w,wm,wo)
"clear highlights for a search
nnoremap <silent> <leader><space> :noh<CR>
"buffer mappings [buffer]
"map <leader>b :bn<CR>
"toggle cursor line [cursor]
map <leader>c :set cursorline!<CR>
" execute current file [execute]
map <leader>e :shell ./% 
"fold a tag (in html, etc) [fold tag]
map <leader>ft Vatzf
"toggle displaying newline charaters and tabs [list]
map <silent> <leader>l :set list!<CR>
"toggle line numbering [number]
map <silent> <leader>n :set number<CR>
"toggle relativenumbering [relativenumber]
map <silent> <leader>r :set relativenumber!<CR>
"toggle spell checking [spelling]
nmap <silent> <leader>s :set spell!<CR>
"open up .vimrc file for editing [vimrc edit]
nmap <silent> <leader>ve :tabe $MYVIMRC<CR>
"source vimrc [vimrc source]
nmap <silent> <leader>vs :source ~/.vimrc<CR>
"toggle line wrapping [wrap]
map <leader>w :set wrap!<CR>
" setup for writing mode - wrap, lbr, spelling, no line numbers, bigger line height and bigger font [writing mode]
map <silent> <leader>wm :VimroomToggle<CR>:set wrap<CR>:set lbr<CR>:set spell<CR>:set nonumber<CR>:set linespace=2<CR>:set norelativenumber<CR>:set guifont=monaco\ 15<CR>:set showbreak=<CR>
"turn off writing mode [writing off]
map <silent> <leader>wo :VimroomToggle<CR>:set nospell<CR>:set relativenumber<CR>>:set linespace=0<CR>:set guifont=monaco\ 10<CR>:set showbreak=…<CR>

"commenting
map <C-c> <leader>c<space>

"open file under cursor in a new tab
map <C-o> <C-w>gf

"easier movement
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"text bubbling
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" surrounds
map c" cs'"
map c' cs"'
map ,ct cst

"visually select the las edited pasted line
nmap gV `[v`]

"json view
nmap <leader>j !!python -c "import sys,json; print(json.dumps(json.loads(sys.stdin.read()), indent=4))"<CR>

"new tab
map <C-t> :tabnew<CR>

"buffergator
map <C-b> :BuffergatorToggle<CR>

"toggle nerd tree
map <C-n> :NERDTreeToggle<CR>
"save session
"map <C-m> :mksession! ~/.vimsession<CR>
map <C-s> :mks! ~/.vimsession<CR>

"folds
"remove all folds
map <C-z> :set foldmethod=manual<CR>zE
"python folds
map <C-p> :set foldmethod=indent<CR>
"disabled arrow keys
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>
"navigation works on visual lines
map k gk
map j gj

"makes ; do what : does
"nnoremap ; :

"write files when loose focus
au FocusLost * :wa

"For PHP programming auto stuffs
au! BufNewFile,BufRead *.php set filetype=php.html.javascript.css.sql
au BufNewFile,BufRead *.php set makeprg=php\ -l\ %
au BufNewFile,BufRead *.php set errorformat=%m\ in\ %f\ on\ line\ %l
au BufNewFile,BufRead *.php let php_htmlInStrings=1
au BufNewFile,BufRead *.php let php_sql_query=1
au BufNewFile,BufRead *.php set foldmethod=manual
au BufNewFile,BufRead *.php let g:DisableAutoPHPFolding=1
au BufNewFile,BufRead *.php set comments=sr:/*,mb:*,ex:*/
au BufNewFile,BufRead *.php set fo+=ro
au BufNewFile,BufRead *.php let php_folding=0
"let php_folding=0
source ~/.vim/bundle/phpfolding/phpfolding.vim
au BufNewFile,BufRead *.php map <F5> <Esc>:EnableFastPHPFolds<Cr>
au BufNewFile,BufRead *.php map <F6> <Esc>:EnablePHPFolds<Cr>
au BufNewFile,BufRead *.php map <F7> <Esc>:DisablePHPFolds<Cr>

"For Python programing auto stuffs
au BufNewFile,BufRead *.py set foldnestmax=1
au BufNewFile,BufRead *.py set foldmethod=indent

"Markdown auto stuffs
"treat .text, README, and .md files as mkd files
au! BufNewFile,BufRead *.text  set filetype=mkd
au BufNewFile,BufRead *.text  set ai formatoptions=tcroqn2 comments=n:&gt;

au! BufNewFile,BufRead README  set filetype=mkd
au BufNewFile,BufRead README  set ai formatoptions=tcroqn2 comments=n:&gt;

au! BufNewFile,BufRead *.md  set filetype=mkd
au BufNewFile,BufRead *.md  set ai formatoptions=tcroqn2 comments=n:&gt;

au BufReadPost fugitive://* set bufhidden=delete

if (OnProduction() == 1)
	hi StatusLine	ctermbg=052		cterm=BOLD
	hi StatusLineNC	ctermbg=052		guibg=#660000
	hi LineNr		ctermbg=052		cterm=BOLD
endif

"commonly mis-typed commands
cabbrev W w
cabbrev Q q
cabbrev E e
cabbrev Tabe tabe

"plugin settings
"Vimroom
let g:vimroom_background = "DarkGray"
let g:vimroom_sidebar_height = 0
let g:vimroom_scrolloff = 3

"custom functions
let s:_ = ''

function! s:ExecuteInShell(command, bang)
	let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))
	let _ = substitute(_, '%', expand('%'), '')

	if (_ != '')
		let s:_ = substitute(_, '%', expand('%'), '')
		let bufnr = bufnr('%')
		let winnr = bufwinnr('^execution' . _ . '$')
		silent! execute  winnr < 0 ? 'bo new execution' . fnameescape(_) : 'bo ' . winnr . 'wincmd w'
		setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number nocursorline
		"silent! :%d
		"silent! 2d | resize 1 | redraw
		silent! execute 'silent! %!'. _
		silent! execute 'resize 9'
		silent! execute 'normal! G'
		silent! execute 'winc p'
	endif
endfunction
command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell

function! Calc(str)
  if exists("g:MyCalcRounding")
    return system("echo 'x=" . a:str . ";d=.5/10^" . g:MyCalcPresition
          \. ";if (x<0) d=-d; x+=d; scale=" . g:MyCalcPresition . ";print x/1' | bc -l")
  else
    return system("echo 'scale=" . g:MyCalcPresition . " ; print " . a:str . "' | bc -l")
  endif
endfunction

" Control the precision with this variable
let g:MyCalcPresition = 2
" Comment this if you don't want rounding
let g:MyCalcRounding = 1
" Use \C to replace the current line of math expression(s) by the value of the computation:
map <silent> <Leader>= :s/.*/\=Calc(submatch(0))/<CR>:noh<CR>
" Same for a visual selection block
vmap <silent> <Leader>= :B s/.*/\=Calc(submatch(0))/<CR>:noh<CR>
" With \C= don't replace, but add the result at the end of the current line
map <silent> <Leader>=c :s/.*/\=submatch(0) . " = " . Calc(submatch(0))/<CR>:noh<CR>
" Same for a visual selection block
vmap <silent> <Leader>=c :B s/.*/\=submatch(0) . " = " . Calc(submatch(0))/<CR>:noh<CR>
" Try: :B s/.*/\=Calc("1000 - " . submatch(0))/
" The concatenation is important, since otherwise it will try
" to evaluate things like in ":echo 1000 - ' 1748.24'"
vmap <Leader>=+ :B s/.*/\=Calc(' +' . submatch(0))/<C-Left><C-Left><C-Left><Left>
vmap <Leader>=- :B s/.*/\=Calc(' -' . submatch(0))/<C-Left><C-Left><C-Left><Left>
" With \Cs you add a block of expressions, whose result appears in the command line
vmap <silent> <Leader>=t y:echo Calc(substitute(@0," *\n","+","g"))<CR>:silent :noh<CR>
" Try: :Calc 12.7 + sqrt(98)
command! -nargs=+ Calc :echo Calc("<args>")

"""""""""""""""""""""""""""""""""""""
"new stuff
"""""""""""""""""""""""""""""""""""""
"Strip the newline from the end of a string
function! Chomp(str)
	return substitute(a:str, '\n$', '', '')
endfunction

"Find a file and pass it to cmd
function! DmenuOpen(cmd)
	let fname = Chomp(system("find . | dmenu -i -l 20 -p " . a:cmd))
	if empty(fname)
		return
	endif
	execute a:cmd . " " . fname
endfunction

map <c-t> :call DmenuOpen('tabe')<cr>
map <c-f> :call DmenuOpen('e')<cr>

"Python folding
"set nofoldenable

"ctrlp
"let g:ctrlp_max_height = 30
"set wildignore+=*.pyc
"set wildignore+=*_build/*
"set wildignore+=*/coverage/*

"python-mode
"map <leader>g :call RopeGotoDefinition()<cr>
"let ropevim_enable_shortcutes = 1
"let g:pymode_rope_goto_def_newwin = 'vnew'
"let g:pymode_rope_extended_complete = 1
"let g:pymode_breakpoint = 0
"let g:pymode_syntax = 1
"let g:pymode_syntax_builtin_objs = 1
"let g:pymode_syntax_builtin_funcs = 1

"map <leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
