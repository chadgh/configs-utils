#!/usr/bin/python
import re
import sys
import os
import io
import ConfigParser

# Modify the following configuration string to change the way the script works by default.
# Also some command line arguments can be supplied to modify the results.
configuration = """
[general]
data_file = /home/chansen4/.cache/notify-osd.log
#data_file = /home/[username]/.cache/notify-osd.log
#[normal, terminal, conky] are the only options for now
default_output_type = terminal
default_number_notifications = 7

[terminal]
default_format_string = ${em}%s${offem}: ${bold}%s${offbold} - %s
default_param_1 = app
default_param_2 = name
default_param_3 = message

[conky]
# conky formating can be tricky. Here are a few examples
# param_n: specify which value to put on the nth occurance of %s in the conky format string
# possible values are; app, name, message

# all of the default settings are required.

# the custom_apps setting is required whether it has a value or not
# Valid values of custom_apps is a comma seperated string containing the custom apps.

# For a custom app, all matching settings are needed.
custom_apps = Pidgin, kupfer

# the default_format_string is used for all applications that are not otherwise specified
default_format_string = ${color gray}${offset 20}%s ${color #222222}-- ${color gray}%s ${color #222222}${hr 1}
default_param_1 = app
default_param_2 = name
# not specified but still required to be there
default_param_3 = None

# any notification that has Pidgin as the Application_Name will be displayed using the following conky format string.
Pidgin_format_string = ${color gray}${offset 20}%s ${color #222222}said ${color gray}%s${color #222222}
Pidgin_param_1 = name
Pidgin_param_2 = message
Pidgin_param_3 = None

kupfer_format_string = ${color red}${offset 20}ATTENTION${color #222222}: ${color gray}%s ${color #222222}${hr 1}
kupfer_param_1 = name
kupfer_param_2 = None
kupfer_param_3 = None
"""

def display_string(default_format, app, name, message, default_param_1, default_param_2, default_param3):
	"""The display_string function determines what parameters to include in the display string 
	and returnes the formated string. This method is repeated several times in the code. Best to have
	a function for it."""
	param_1 = app if default_param_1 == 'app' else name if default_param_1 == 'name' else message if default_param_1 == 'message' else None
	param_2 = app if default_param_2 == 'app' else name if default_param_2 == 'name' else message if default_param_2 == 'message' else None
	param_3 = app if default_param_3 == 'app' else name if default_param_3 == 'name' else message if default_param_3 == 'message' else None
	format_string = ''
	if param_1 is not None and param_2 is not None and param_3 is not None:
		format_string = default_format % (param_1, param_2, param_3)
	elif param_1 is not None and param_2 is not None:
		format_string = default_format % (param_1, param_2)
	elif param_1 is not None:
		format_string = default_format % (param_1)
	return format_string

config = ConfigParser.RawConfigParser()
config.readfp(io.BytesIO(configuration))

data_file = config.get('general', 'data_file')
output_type = config.get('general', 'default_output_type')
number = config.get('general', 'default_number_notifications')

# Should the help information be displayed?
if '-h' in sys.argv or '--help' in sys.argv:
	print """Usage: notify.py [-o=[terminal|conky|normal]] [-n N]\n
	\t-o\tspecify a different output type from the default.\n
	\t-n\tspecify a different number of notification to display.\n
	\t-h | --help\tdisplay this help.\n\n"""
	sys.exit(0)

# Change the default (configured) output type by commandline argument.
if '-o=terminal' in sys.argv or '-o=t' in sys.argv:
	output_type = 'terminal'
elif '-o=conky' in sys.argv or '-o=c' in sys.argv:
	output_type = 'conky'
elif '-o=normal' in sys.argv or '-o=n' in sys.argv:
	output_type = 'normal'

#Change the default number if specified on the command line.
if '-n' in sys.argv:
	number = sys.argv[sys.argv.index('-n') + 1]

# get all of the notifications from the specified data_file.
#WARNING: Only tested with notify-osd.log files.
entries = []
tmp_entry = ''
fp = open(data_file, 'r')
for line in fp:
	if len(line.strip()) == 0:
		if len(tmp_entry.strip()) != 0:
			entries.append(tmp_entry)
		tmp_entry = ''
	else:
		tmp_entry += line
fp.close()

lastEntries = []
for entry in entries:
	# Structure of a normal entry in the notify-osd.log file:
	# [YYYY-mm-ddThh:mm:ss-zz:zz, Application_Name] Message_Name
	# Message text
	# TODO - some entries don't actually have a second line. This script is unpredicable if that is encountered.
	
	# the following line strips everything off the front of the first message line
	# before the Application_Name
	good = re.sub('^\[([^,]+),\s+', '', entry)
	# parts[0] contains the first line (application/name information)
	# parts[1] contains the second line (message text)
	parts = good.split("\n")
	if parts[0].find("]") != -1:
		app = parts[0].split("]")[0].strip()
		name = parts[0].split("]")[1].strip()
		message = ""
		for part in parts[1:]:
			if part.strip() != '':
				message += part.strip() + " "
		lastEntries.append((app, name, message))

entries = lastEntries[-1 * int(number):]
# by this point entries contains cleaned up versions of the notifications and just
# the last n notifications specified by number

if output_type == 'terminal':
	default_format = config.get('terminal', 'default_format_string')
	default_param_1 = config.get('terminal', 'default_param_1')
	default_param_2 = config.get('terminal', 'default_param_2')
	default_param_3 = config.get('terminal', 'default_param_3')

	for entry in entries:
		app, name, message = entry
		format_string = display_string(default_format, app, name, message, default_param_1, default_param_2, default_param_3)
		os.system('echo "%s"' % (format_string))

elif output_type == 'conky':
	custom_apps = [app.strip() for app in config.get('conky', 'custom_apps').split(',')]
	default_format = config.get('conky', 'default_format_string')
	default_param_1 = config.get('conky', 'default_param_1')
	default_param_2 = config.get('conky', 'default_param_2')
	default_param_3 = config.get('conky', 'default_param_3')

	for entry in entries:
		app, name, message = entry

		# conky gets a little screwy if # are not escaped.
		name = name.replace("#", "\#")
		message = message.replace("#", "\#")

		if app in custom_apps:
			format_string = display_string(config.get('conky', app + '_format_string'), app, name, message, config.get('conky', app + '_param_1'), config.get('conky', app + '_param_2'), config.get('conky', app + '_param_3'))
			print format_string + "\n"
		else:
			format_string = display_string(default_format, app, name, message, default_param_1, default_param_2, default_param_3)
			print format_string + "\n"

else: # for normal or anything else that isn't implemeneted yet.
	for entry in entries:
		app, name, message = entry
		print "%s - %s - %s" % (app, name, message)

